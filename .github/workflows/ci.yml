name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvips42 libheif-dev
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run Black formatter check
      run: |
        cd backend
        black --check app/ tests/
    
    - name: Run Flake8 linter
      run: |
        cd backend
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203
    
    - name: Run Bandit security check
      run: |
        cd backend
        bandit -r app/ -ll
    
    - name: Run MyPy type check
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Check formatting with Prettier
      run: |
        cd frontend
        npx prettier --check "src/**/*.{js,css,html}"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Check build output
      run: |
        cd frontend
        test -d dist
        test -f dist/index.html

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        push: false
        tags: image-converter-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create minimal .env.production file for Docker Compose
      run: |
        echo "# CI production environment" > .env.production

    - name: Test Docker Compose Production
      run: |
        docker compose -f docker-compose.prod.yml build
        docker compose -f docker-compose.prod.yml up -d
        sleep 15
        curl -f http://localhost:8000/api/health || exit 1
        curl -f http://localhost:80/ || exit 1
        docker compose -f docker-compose.prod.yml down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Show Trivy results (if upload failed)
      if: failure()
      run: |
        echo "Code scanning upload failed, but security scan completed."
        echo "Trivy results:"
        if [ -f trivy-results.sarif ]; then
          cat trivy-results.sarif | jq '.runs[0].results[] | {ruleId, level, message}' || echo "SARIF file exists but could not parse with jq"
        else
          echo "No SARIF file generated"
        fi