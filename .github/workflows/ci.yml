name: Strict Quality CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  MIN_COVERAGE: '80'
  FAIL_UNDER_COVERAGE: 'true'

jobs:
  # ============================================
  # GATE 1: CODE QUALITY (STRICT - MUST PASS)
  # ============================================
  code-quality-backend:
    name: "üîç Backend Code Quality (STRICT)"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: "üìê Code Formatting (Black) - STRICT"
      run: |
        cd backend
        echo "Checking code formatting with Black (STRICT MODE)..."
        if ! black --check --diff app/ tests/; then
          echo ""
          echo "‚ùå FORMATTING FAILURE - CODE QUALITY GATE FAILED"
          echo "üîß Fix with: cd backend && black app/ tests/"
          echo "üìã This is NON-NEGOTIABLE for code consistency"
          exit 1
        fi
        echo "‚úÖ Code formatting passed"
    
    - name: "üîç Import Organization (isort) - STRICT"
      run: |
        cd backend
        echo "Checking import organization..."
        if ! isort --check-only --diff app/ tests/; then
          echo ""
          echo "‚ùå IMPORT ORDER FAILURE - CODE QUALITY GATE FAILED" 
          echo "üîß Fix with: cd backend && isort app/ tests/"
          exit 1
        fi
        echo "‚úÖ Import organization passed"
    
    - name: "üîç Code Linting (Flake8) - COMPREHENSIVE"
      run: |
        cd backend
        echo "Running comprehensive linting..."
        if ! flake8 app/ tests/ \
          --max-line-length=88 \
          --extend-ignore=E203,W503 \
          --max-complexity=10 \
          --statistics; then
          echo ""
          echo "‚ùå LINTING FAILURE - CODE QUALITY GATE FAILED"
          echo "üîß Fix all linting issues before proceeding"
          exit 1
        fi
        echo "‚úÖ Comprehensive linting passed"
    
    - name: "üîç Type Checking (MyPy) - STRICT MODE"
      run: |
        cd backend
        echo "Running strict type checking..."
        if ! mypy app/ \
          --strict \
          --ignore-missing-imports \
          --no-implicit-optional \
          --warn-redundant-casts \
          --warn-unused-ignores; then
          echo ""
          echo "‚ùå TYPE CHECKING FAILURE - CODE QUALITY GATE FAILED"
          echo "üîß Add proper type hints and fix type issues"
          exit 1
        fi
        echo "‚úÖ Strict type checking passed"

  code-quality-frontend:
    name: "üîç Frontend Code Quality (STRICT)"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: "üìê Code Formatting (Prettier) - STRICT"
      run: |
        cd frontend
        echo "Checking code formatting with Prettier (STRICT MODE)..."
        if ! npx prettier --check "src/**/*.{js,css,html}"; then
          echo ""
          echo "‚ùå FORMATTING FAILURE - FRONTEND CODE QUALITY GATE FAILED"
          echo "üîß Fix with: cd frontend && npm run format"
          exit 1
        fi
        echo "‚úÖ Frontend formatting passed"
    
    - name: "üîç Code Linting (ESLint) - COMPREHENSIVE"
      run: |
        cd frontend
        echo "Running comprehensive ESLint..."
        if ! npm run lint; then
          echo ""
          echo "‚ùå ESLINT FAILURE - FRONTEND CODE QUALITY GATE FAILED"
          echo "üîß Fix all ESLint errors and warnings"
          exit 1
        fi
        echo "‚úÖ Frontend linting passed"
    
    - name: "üèóÔ∏è Build Test - MUST COMPILE"
      run: |
        cd frontend
        echo "Testing frontend build..."
        if ! npm run build; then
          echo ""
          echo "‚ùå BUILD FAILURE - FRONTEND CODE QUALITY GATE FAILED"
          echo "üîß Fix build errors before proceeding"
          exit 1
        fi
        echo "‚úÖ Frontend build passed"

  # ============================================
  # GATE 2: SECURITY VALIDATION (ZERO TOLERANCE)  
  # ============================================
  security-validation:
    name: "üõ°Ô∏è Security Validation (ZERO TOLERANCE)"
    runs-on: ubuntu-latest
    needs: [code-quality-backend, code-quality-frontend]
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: "üîç Python Security Scan (Bandit) - ZERO TOLERANCE"
      run: |
        cd backend
        echo "Running comprehensive security scan..."
        if ! bandit -r app/ \
          -f json \
          -o bandit-report.json \
          --severity-level low \
          --confidence-level low; then
          echo ""
          echo "‚ùå SECURITY VULNERABILITIES FOUND - SECURITY GATE FAILED"
          echo "üõ°Ô∏è Fix ALL security issues before proceeding"
          echo "üìä Review bandit-report.json for details"
          exit 1
        fi
        echo "‚úÖ Python security scan passed"
    
    - name: "üîç Dependency Vulnerability Scan (Safety) - ZERO TOLERANCE" 
      run: |
        cd backend
        echo "Scanning dependencies for known vulnerabilities..."
        if ! safety scan --json --output safety-report.json; then
          echo ""
          echo "‚ùå VULNERABLE DEPENDENCIES FOUND - SECURITY GATE FAILED"
          echo "üîß Update vulnerable dependencies immediately"
          echo "üìä Review safety-report.json for details"
          exit 1
        fi
        echo "‚úÖ Dependency vulnerability scan passed"
    
    - name: "üîç Container Security Scan (Trivy) - CRITICAL ONLY"
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on findings
    
    - name: "üïµÔ∏è Secret Detection Scan"
      run: |
        echo "Scanning for hardcoded secrets..."
        # Simple secret detection patterns
        if grep -r -i \
          -e "password.*=" \
          -e "api.key.*=" \
          -e "secret.*=" \
          -e "token.*=" \
          --include="*.py" \
          --include="*.js" \
          --exclude-dir=node_modules \
          --exclude-dir=.git \
          backend/ frontend/ 2>/dev/null | grep -v "# nosecret" | head -5; then
          echo ""
          echo "‚ùå POTENTIAL SECRETS DETECTED - SECURITY GATE FAILED"
          echo "üîß Remove hardcoded secrets or add '# nosecret' comment if false positive"
          exit 1
        fi
        echo "‚úÖ Secret detection scan passed"

  # ============================================
  # GATE 3: COMPREHENSIVE TESTING (80% COVERAGE REQUIRED)
  # ============================================
  comprehensive-testing:
    name: "üß™ Comprehensive Testing (80% COVERAGE REQ)"
    runs-on: ubuntu-latest
    needs: [security-validation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvips42 libheif-dev
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: "üß™ Backend Tests with STRICT Coverage"
      run: |
        cd backend
        echo "Running backend tests with 80% coverage requirement..."
        if ! pytest tests/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html \
          --cov-fail-under=${{ env.MIN_COVERAGE }} \
          --tb=short; then
          echo ""
          echo "‚ùå BACKEND TESTING FAILED - COVERAGE < 80% OR TESTS FAILED"
          echo "üß™ Fix failing tests and improve coverage"
          echo "üìä Check coverage report for gaps"
          exit 1
        fi
        echo "‚úÖ Backend tests passed with 80%+ coverage"
    
    - name: "üß™ Frontend Tests with Coverage"
      run: |
        cd frontend
        echo "Running frontend tests..."
        if ! npm run test -- --coverage --watchAll=false; then
          echo ""
          echo "‚ùå FRONTEND TESTING FAILED - TESTS FAILED OR LOW COVERAGE"
          echo "üß™ Fix failing tests and improve coverage"
          exit 1
        fi
        echo "‚úÖ Frontend tests passed"
    
    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
    
    - name: Upload Frontend Coverage  
      uses: codecov/codecov-action@v5
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true

  # ============================================
  # GATE 4: BUILD VALIDATION (ALL SERVICES MUST BUILD)
  # ============================================
  build-validation:
    name: "üèóÔ∏è Build Validation (ALL SERVICES)"
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: "üèóÔ∏è Backend Docker Build - MUST SUCCEED"
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        target: production
        push: false
        tags: image-converter-backend:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: "üèóÔ∏è Frontend Docker Build - MUST SUCCEED" 
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        target: production
        push: false
        tags: image-converter-frontend:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: "üìä Frontend Bundle Size Analysis"
      run: |
        cd frontend
        npm ci
        npm run build
        echo "Analyzing bundle size..."
        if [ ! -f "dist/assets/index-*.js" ]; then
          echo "‚ùå Main bundle file not found"
          exit 1
        fi
        BUNDLE_SIZE=$(wc -c < dist/assets/index-*.js)
        MAX_SIZE=500000  # 500KB limit
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size too large: ${BUNDLE_SIZE} bytes (max: ${MAX_SIZE})"
          echo "üîß Optimize bundle size before proceeding"
          exit 1
        fi
        echo "‚úÖ Bundle size OK: ${BUNDLE_SIZE} bytes"

  # ============================================
  # GATE 5: PRODUCTION READINESS (FINAL VALIDATION)
  # ============================================
  production-readiness:
    name: "üöÄ Production Readiness (FINAL)"
    runs-on: ubuntu-latest
    needs: [build-validation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create production environment files
      run: |
        echo "# CI production environment" > .env.production
        mkdir -p ssl data/backend logs/backend ml_models
    
    - name: "üöÄ Full Production Deploy Test"
      run: |
        echo "Testing full production deployment..."
        if ! timeout 300s bash -c '
          docker compose -f docker-compose.prod.yml build &&
          docker compose -f docker-compose.prod.yml up -d &&
          sleep 30 &&
          curl -f --max-time 10 http://localhost:8000/api/health &&
          curl -f --max-time 10 http://localhost:80/
        '; then
          echo ""
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED - FINAL GATE FAILED"
          echo "üîß Fix deployment issues before merge"
          docker compose -f docker-compose.prod.yml logs
          exit 1
        fi
        echo "‚úÖ Production deployment successful"
    
    - name: "‚ö° Performance Smoke Test"
      run: |
        echo "Running performance smoke test..."
        RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8000/api/health)
        if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
          echo "‚ùå API response too slow: ${RESPONSE_TIME}s (max: 2.0s)"
          exit 1
        fi
        echo "‚úÖ Performance test passed: ${RESPONSE_TIME}s"
    
    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.prod.yml down -v
        docker system prune -f