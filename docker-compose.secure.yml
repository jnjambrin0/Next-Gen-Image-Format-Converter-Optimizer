# Security-Hardened Docker Compose Configuration
# Enhanced security measures for production deployment

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: image-converter-backend:latest
    container_name: image_converter_backend_secure
    ports:
      - "127.0.0.1:8000:8000"  # Bind only to localhost
    volumes:
      # All volumes mounted as read-only where possible
      - ./ml_models:/app/ml_models:ro
      - backend_data:/app/data:rw
      - backend_logs:/app/logs:rw
      - type: tmpfs
        target: /tmp/image-converter
        tmpfs:
          size: 512M
          mode: 1770
    environment:
      - IMAGE_CONVERTER_ENV=production
      - IMAGE_CONVERTER_DEBUG=false
      - IMAGE_CONVERTER_LOG_LEVEL=WARNING
      - IMAGE_CONVERTER_API_HOST=0.0.0.0
      - IMAGE_CONVERTER_API_PORT=8000
      - IMAGE_CONVERTER_API_WORKERS=4
      - IMAGE_CONVERTER_CORS_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - IMAGE_CONVERTER_DATABASE_URL=sqlite:///./data/app.db
      - IMAGE_CONVERTER_ML_MODELS_PATH=/app/ml_models
      - IMAGE_CONVERTER_ENABLE_SANDBOXING=true
      - IMAGE_CONVERTER_SANDBOX_STRICTNESS=paranoid
      - IMAGE_CONVERTER_MAX_CONCURRENT_CONVERSIONS=10
      - IMAGE_CONVERTER_MEMORY_LIMIT_MB=256
      - IMAGE_CONVERTER_CPU_LIMIT_PERCENT=60
      - IMAGE_CONVERTER_STRIP_METADATA_DEFAULT=true
      - IMAGE_CONVERTER_ANONYMIZE_LOGS=true
      - IMAGE_CONVERTER_NETWORK_VERIFICATION_ENABLED=true
      - IMAGE_CONVERTER_NETWORK_VERIFICATION_STRICTNESS=strict
      - IMAGE_CONVERTER_TERMINATE_ON_NETWORK_VIOLATION=true
      # Use Docker secrets for sensitive data
      - IMAGE_CONVERTER_SECRET_KEY_FILE=/run/secrets/app_secret_key
    secrets:
      - app_secret_key
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
          pids: 256  # PID limit to prevent fork bombs
        reservations:
          cpus: '1'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0.3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=backend,env=production"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    read_only: true  # Make root filesystem read-only
    tmpfs:
      - /tmp:size=512M,mode=1770,uid=1000,gid=1000
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
      memlock:
        soft: -1
        hard: -1

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_HOST=${FRONTEND_API_HOST:-backend}
        - VITE_API_PORT=${FRONTEND_API_PORT:-8000}
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: image-converter-frontend:latest
    container_name: image_converter_frontend_secure
    ports:
      - "127.0.0.1:80:80"     # HTTP bound to localhost
      - "127.0.0.1:443:443"   # HTTPS bound to localhost
    volumes:
      # SSL certificates as read-only
      - ./ssl:/etc/nginx/ssl:ro
      # Custom nginx config as read-only
      - ./nginx-secure.conf:/etc/nginx/conf.d/default.conf:ro
      - type: tmpfs
        target: /var/cache/nginx
        tmpfs:
          size: 100M
          mode: 1770
      - type: tmpfs
        target: /var/run
        tmpfs:
          size: 10M
          mode: 1770
    environment:
      - NODE_ENV=production
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    networks:
      - app_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
          pids: 128
        reservations:
          cpus: '0.5'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=frontend,env=production"
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    user: "1000:1000"  # Run as non-root user

  # Security monitoring with Falco (optional)
  falco:
    image: falcosecurity/falco:latest
    container_name: image_converter_falco
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - ./monitoring/falco/rules:/etc/falco/rules.d:ro
    environment:
      - FALCO_GRPC_ENABLED=true
      - FALCO_GRPC_BIND_ADDRESS=0.0.0.0:5060
    networks:
      - monitoring_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  app_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-imgconv
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1450
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    internal: false  # Allow external access (through reverse proxy)
    attachable: false
    labels:
      - "com.example.network=image-converter"
      - "com.example.environment=production"

  monitoring_network:
    driver: bridge
    internal: true  # No external access for monitoring
    attachable: false

volumes:
  backend_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/backend
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs/backend

# Docker secrets configuration
secrets:
  app_secret_key:
    external: true  # Create with: docker secret create app_secret_key secret_key.txt