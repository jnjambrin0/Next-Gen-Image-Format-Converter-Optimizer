# Security-hardened Nginx configuration for Image Converter
# Implements OWASP best practices and defense in depth

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Map to block suspicious user agents
map $http_user_agent $blocked_agent {
    default 0;
    ~*bot 1;
    ~*crawler 1;
    ~*spider 1;
    ~*scraper 1;
    ~*scanner 1;
    ~*sqlmap 1;
    ~*nikto 1;
    ~*acunetix 1;
    ~*nmap 1;
}

# SSL configuration
server {
    listen 443 ssl http2;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # SSL certificates
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "0" always;  # Disabled as per modern best practices
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
    
    # Content Security Policy
    set $csp_default "default-src 'self'";
    set $csp_script "script-src 'self' 'sha256-...' 'strict-dynamic'";  # Add specific hashes
    set $csp_style "style-src 'self' 'unsafe-inline'";  # Consider removing unsafe-inline
    set $csp_img "img-src 'self' data: blob:";
    set $csp_connect "connect-src 'self' wss://localhost:* https://localhost:*";
    set $csp_font "font-src 'self' data:";
    set $csp_object "object-src 'none'";
    set $csp_media "media-src 'none'";
    set $csp_frame "frame-src 'none'";
    set $csp_worker "worker-src 'self' blob:";
    set $csp_manifest "manifest-src 'self'";
    set $csp_form "form-action 'self'";
    set $csp_frame_ancestors "frame-ancestors 'none'";
    set $csp_base "base-uri 'self'";
    set $csp_upgrade "upgrade-insecure-requests";
    
    add_header Content-Security-Policy "${csp_default}; ${csp_script}; ${csp_style}; ${csp_img}; ${csp_connect}; ${csp_font}; ${csp_object}; ${csp_media}; ${csp_frame}; ${csp_worker}; ${csp_manifest}; ${csp_form}; ${csp_frame_ancestors}; ${csp_base}; ${csp_upgrade}" always;

    # Block suspicious user agents
    if ($blocked_agent) {
        return 403;
    }

    # Request body size limits
    client_max_body_size 100M;
    client_body_buffer_size 1M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # Timeouts
    client_body_timeout 30s;
    client_header_timeout 30s;
    keepalive_timeout 30s;
    send_timeout 30s;

    # Gzip compression (selective)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss application/rss+xml application/atom+xml image/svg+xml text/javascript application/x-javascript application/x-font-ttf application/vnd.ms-fontobject font/opentype;
    gzip_disable "msie6";

    # Cache static assets with fingerprinting
    location ~* \.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 365d;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        access_log off;
    }

    # Cache CSS and JS with shorter expiry
    location ~* \.(css|js)$ {
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
        add_header X-Content-Type-Options "nosniff" always;
    }

    # API proxy with rate limiting
    location /api {
        # Rate limiting
        limit_req zone=api burst=50 nodelay;
        limit_conn addr 10;
        
        # Security headers for API
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Security: Hide backend server details
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Timeouts for long-running conversions
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Disable buffering for real-time responses
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Upload endpoint with stricter rate limiting
    location /api/convert {
        limit_req zone=upload burst=10 nodelay;
        limit_conn addr 5;
        
        client_max_body_size 100M;
        
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # WebSocket proxy for real-time updates
    location /ws {
        limit_conn addr 5;
        
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }

    # SPA fallback with rate limiting
    location / {
        limit_req zone=general burst=20 nodelay;
        try_files $uri $uri/ /index.html;
        
        # Security headers for HTML
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
    }

    # Health check endpoint (no rate limiting)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Security: Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|git|gitignore|dockerignore|yml|yaml|toml|lock|md)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /(config|src|node_modules|package\.json|package-lock\.json)(/|$) {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name localhost;
    
    # Rate limiting for HTTP
    limit_req zone=general burst=10 nodelay;
    
    # ACME challenge for Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}